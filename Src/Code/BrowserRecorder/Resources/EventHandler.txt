    if (typeof (Recorder) === "undefined") { Recorder = { __namespace: true } }

    Recorder.ELEMENT_NODE = 1;
    

    Recorder.attachDocumentEvents = function () {
        if (document != null) {
            if (document.addEventListener) {
                document.addEventListener('mouseup', Recorder.clickHandler, false);
            }
            else if (document.attachEvent) {
                document.attachEvent('mouseup', function (e) { return Recorder.clickHandler(e || window.event); });

            }
            else {
                document.onmouseup = Recorder.clickHandler;
            }
        }

    }

    Recorder.clickHandler = function () {
        var data, target;

        if (event == null) {
            event = window.event;
        }
        target = 'target' in event ? event.target : event.srcElement;

        Data = {
            "Event": "EventListener : click",
            "Id": Recorder.uniqueId(),
            "CssSelector": Recorder.getCssSelectorOF(target),
            "ElementId": Recorder.getElementId(target),
            "XPathValue": Recorder.getPathTo(target)
        };
		if(document.eventCollection !== undefined){
			document.eventCollection.push(Data);
			}
		else if (parent.document.eventCollection !== undefined){
			parent.document.eventCollection.push(Data);
		}
    }
	
    Recorder.uniqueId = function () {
        var d = new Date().getTime();
        d += (parseInt(Math.random() * 100)).toString();
        return d;
    }

    Recorder.getElementId = function (element) {
        var selector = '';
        if (element instanceof Element && element.nodeType === Recorder.ELEMENT_NODE && element.id) {
            selector = element.id;
        }
        return selector;
    }

    Recorder.preventEvent = function (event) {
        if (event.preventDefault) {
            event.preventDefault();
        }
        event.returnValue = false;
        if (event.stopPropagation) {
            event.stopPropagation();
        } else {
            event.cancelBubble = true;
        }
        return false;
    }

    Recorder.getXY = function (element) {
        var x, y;
        x = 0;
        y = 0;
        while (element) {
            x += element.offsetLeft;
            y += element.offsetTop;
            element = element.offsetParent;
        }
        return [x, y];
    }

    Recorder.getPathTo = function (element) {
        var element_sibling, siblingTagName, siblings, cnt, sibling_count;
        var elementTagName = element.tagName.toLowerCase();
        if (element.id != '') {
            return 'id("' + element.id + '")';
        } else if (element.name && document.getElementsByName(element.name).length === 1) {
            return '//' + elementTagName + '[@name="' + element.name + '"]';
        }
        if (element === document.body) {
            return '/html/' + elementTagName;
        }
        sibling_count = 0;
        siblings = element.parentNode.childNodes;
        siblings_length = siblings.length;
        for (cnt = 0; cnt < siblings_length; cnt++) {
            var element_sibling = siblings[cnt];
            if (element_sibling.nodeType !== Recorder.ELEMENT_NODE) {
                continue;
            }
            if (element_sibling === element) {
                return Recorder.getPathTo(element.parentNode) + '/' + elementTagName + '[' + (sibling_count + 1) + ']';
            }
            if (element_sibling.nodeType === 1 && element_sibling.tagName.toLowerCase() === elementTagName) {
                sibling_count++;
            }
        }
    }

    Recorder.getCssSelectorOF = function (element) {
        if (!(element instanceof Element))
            return;
        var path = [];
        while (element.nodeType === Recorder.ELEMENT_NODE) {
            var selector = element.nodeName.toLowerCase();
            if (element.id) {
                if (element.id.indexOf('-') > -1) {
                    selector += '[id = "' + element.id + '"]';
                } else {
                    selector += '#' + element.id;
                }
                path.unshift(selector);
                break;
            } else {
                var element_sibling = element;
                var sibling_cnt = 1;
                while (element_sibling = element_sibling.previousElementSibling) {
                    if (element_sibling.nodeName.toLowerCase() == selector)
                        sibling_cnt++;
                }
                if (sibling_cnt != 1)
                    selector += ':nth-of-type(' + sibling_cnt + ')';
            }
            path.unshift(selector);
            element = element.parentNode;
        }
        return path.join(' > ');
    }

    Recorder.attachDocumentEvents();